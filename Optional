nil값 : 값이 없다. (배열과 딕셔너리 등의 비어있는 값과 다른 개념)

ex) var name: String = "조중윤"
name = nil //컴파일 에러!




값이 있을 수도 있고 없을 수도 있는 변수를 정의할 때는 타입 어노테이션에 "?"을 붙여야 한다.
옵션에 초깃값을 지정하지 않으면 기본값은 nil이다.
         
        ,-- 어떤 값 (String, Int, ...)
Optional
        \__ nil

var email: String?
print(email) // nil

email = "123123@gmail.com"
print(email) // Optional ("123123@gmail.com")





let optionalEmail: String? = "123123@gmail.com"
let requiredEmail: String = optionalEmail // 컴파일 에러!

requiredEmail 변수는 옵셔널이 아닌 String이기 때문에 항상 값을 가지고 있어야 함. 반면
optionalEmail은 옵셔널로 선언된 변수기 때문에 실제 코드가 실행되기 전까지는 값이 있는지 없는지 알 수 없다.
따라서 Swift컴파일러는 안전을 위해 requiredEmail에는 옵셔널로 선언된 변수를 대입할 수 없게 만들었다.





Optional Binding
:옵셔널의 값이 존재하는지를 검사한 뒤, 조재한다면 그 값을 다른 변수에 대입.(if var 혹은 if let 사용)

if let email = optionalEmail{
  print(email) //optionalEmail의 값이 존재한다면 해당값이 출력
}
//optionalEmail의 값이 존재하지 않는다면 if문의 그냥 빠져나옴

하나의 if문에서 ","로 구분하여 여러옵셔널을 바인딩 가능. 이곳에 사용된 모든 옵셔널의 값이 존재해야 if문 안으로 진입

var optionalName: String? = "조중윤"
var optionalEmail: String? = "123123@gmail.com"

if let name = optionalName, email = optionalEmail{
// name과 email 값이 존재
}

tip:코드가 길 경우, 이렇게 여러줄에 걸쳐서 사용하는 것이 바람직

if let name = optionalName,
    let email = optionalEmail{
    //name과 email값이 존재
    }
    
  위 코드는 아래 코드와 동일(두번째 let부터 생략가능)

if let name = optionalName{
  if let email = optionalEmail{
      //name과 email 값이 존재
      }
     }
     
옵셔널을 바인딩할 때 ","를 사용해서 조건도 함께 지정할 가능. "," 이후의 조건절은 옵셔널 바인딩이 일어난 후에 실행
즉, 옵셔널이 벗겨진 값을 가지고 조건 검사.

var optionalAge: Int> 22

if let age = optionalAge, age >= 20{
  //age의 값이 존재하고, 20이상입니다.
}

위와 동일한 코드

if let age = optionalAge{
  if age >= 20{
  //age의 값이 존재하고, 20 이상입니다.
  }
  }
  
  
  
  
  Optional Chaining
  
  Swift코드를 간결하게 만들어주는 요소 중 하나.
  옵셔널로 선언된 어떤 배열이 빈 배열인지 검사하는 코드를 생각해보자.
  
  let array: [String]? = [] // 옵셔널 배열 선언
  var isEmptyArray = false //배열이 비었는지 검사
  
  if let array = array, array.isEmpty { //배열에 값 유무확인(옵셔널 바인딩) 후 isEmpty활용
    isEmptyArray = true//array가 빈 배열인 경우
    }else{
    isEmptyArray = false //array에 요소가 있는 경우
    }
    //array가 값이 없다면 nil값을 반환
    isEmptyArray
    
    옵셔널 체이닝을 쓰면 이 코드를 더 간결하게 쓸 수 있음
    ↓↓    
    let isEmptyArray = array?.isEmpty == true
    옵셔널 체이닝은 옵셔널의 속성에 접근할 때, 옵셔널 바인딩 과정을 "?"키워드로 줄여주는 역할
    
    
