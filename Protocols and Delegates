protocol AdvancedLifeSupport {
    //bracket필요없다. performCPR하기만 하면 됨. 어떻게 할지는 하는 사람(delegate받는 class등 객체)에 달려있다. protocol은 certificate라는 것을 기억
    func performCPR()
}
//아래는 예를들어 UITextField에 내재된 코드에 해당하는 부분
//즉 UITextField에 내재된 delegate로 실제로 코드로 구현할 필요는 없는 것.
//실제 애플이 구현해놓은 코드는 볼 수 없음 하지만 이런 형태라는 것을 인지하고 원리 이해하기.
//아래의 코드는 UITextField에 대입하면 EditdidEnding같은 것
class EmergencyCallhandler {
    //delegate가 될 수 있는 것은 AdvancedLifeSupport를 꼭 가지고 있어야 한다는 의미
    var delegate: AdvancedLifeSupport?
    
    func assessSituation() {
        print("can you tell me what happens")
    }
    func medicalEmergency() {
        //'?' 자동 입력됨
        delegate?.performCPR()
    }
}

struct Paramedic: AdvancedLifeSupport {
    init(handler: EmergencyCallhandler){
        //delegate를 받는이 정해줘야 함. 이 구조체가 delegate를 받겠다고 선언하는 것.
        handler.delegate = self
    }
    
    func performCPR() {
        print("The paramedic does chest compressions, 30 per second.")
    }
}

class Doctor: AdvancedLifeSupport {
    //이 class가 delegate를 받겠다고 선언하는 것.
    init(handler: EmergencyCallhandler) {
        handler.delegate = self
    }
    
    func performCPR() {
        print("The doctor does chest compression, 30 per second.")
    }
    
    func useStethescope() {
        print("Listening for heart sounds")
    }
}
//AdvancedLifeSupport를 데이터 타입으로 가지고 있는 Doctor를 상속했기에 delegate가 된다.
class Surgeon: Doctor {
    override func performCPR() {
        //상위 클래스의 performCPR을 받고 추가로
        super.performCPR()
        print("Sings staying alive by the BeeGees")
    }
    
    func useElectricDrill() {
        print("Whirr...")
    }
}

let emilio = EmergencyCallhandler()
//let pete = Paramedic(handler: emilio)
let Angela = Surgeon(handler: emilio)

emilio.assessSituation()
emilio.medicalEmergency()
